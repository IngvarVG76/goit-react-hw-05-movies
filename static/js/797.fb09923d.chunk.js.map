{"version":3,"file":"static/js/797.fb09923d.chunk.js","mappings":"wTAEMA,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAIOC,EAAiB,mCAAG,6GAENC,EAAAA,EAAAA,IAAA,kEAErBN,GAJ2B,cAEvBO,EAFuB,yBAMtBA,GANsB,gCAQ7BC,QAAQC,MAAR,MAR6B,yDAAH,qDAYjBC,EAAY,mCAAG,WAAMC,GAAN,gGAEDL,EAAAA,EAAAA,IACrB,6CADqB,kBAGhBN,GAHgB,IAInBY,OAAQ,CACND,MAAOA,MAPW,cAElBJ,EAFkB,yBAWjBA,GAXiB,gCAaxBC,QAAQC,MAAR,MAbwB,yDAAH,sDAiBZI,EAAe,mCAAG,WAAMC,GAAN,gGAEJR,EAAAA,EAAAA,IAAA,6CACiBQ,EADjB,YAErBd,GAJyB,cAErBO,EAFqB,yBAMpBA,EAASQ,MANW,sCAQ3BP,QAAQC,MAAR,MAR2B,8DAAH,sDAafO,EAAe,mCAAG,WAAMF,GAAN,gGAEJR,EAAAA,EAAAA,IAAA,6CACiBQ,EADjB,YAErBd,GAJyB,cAErBO,EAFqB,yBAMpBA,EAASQ,MANW,sCAQ3BP,QAAQC,MAAR,MAR2B,8DAAH,sDAafQ,EAAe,mCAAG,WAAMH,GAAN,gGAEJR,EAAAA,EAAAA,IAAA,6CACiBQ,GACtCd,GAJyB,cAErBO,EAFqB,yBAOpBA,EAASQ,MAPW,sCAS3BP,QAAQC,MAAR,MAT2B,8DAAH,qD,iHCH5B,UA3DmB,WAAO,IAAD,EACvB,GAA4BS,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,EAAU,UAAGJ,EAAaK,IAAI,eAApB,QAA+B,IAO/CC,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CACA,IAAMG,EAAgB,mCAAG,8GAEEnB,EAAAA,EAAAA,IAAagB,GAFf,OAEfnB,EAFe,OAGrBa,EAAUb,EAASQ,KAAKe,SAHH,gDAKrBtB,QAAQC,MAAR,MALqB,yDAAH,qDAQtBoB,GATuB,CAUxB,IAQD,OACE,4BACE,kBAAME,SARiB,SAAAC,GACzBA,EAAMC,iBAENV,EAAgB,CAAEW,KADER,GAErB,EAIG,WACE,kBACES,KAAK,OACLC,YAAY,mBACZC,MAAOX,EACPY,SAAU,SAAAC,GAAC,OA/BOL,EA+BeK,EAAEC,OAAOH,WA7BhDd,EAD4B,KAATW,EAAc,CAAEA,KAAAA,GAAS,CAAC,GADrB,IAAAA,CA+BP,KAEb,mBAAQC,KAAK,SAAb,uBAGiB,IAAlBhB,EAAOsB,QACN,6CAEA,wBACGtB,EAAOuB,KAAI,SAAAC,GAAK,OACf,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMvB,GAAhD,SACGmB,EAAMK,SAFFL,EAAME,GADA,QAW1B,C","sources":["components/services/Api.js","pages/MoviesPage.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2MDg2OTc5NGZkZmMyODViY2Q4OTk5YWM4ZjhlZDY5NCIsInN1YiI6IjY0NzhkNWFjZTMyM2YzMDEwNjEzZjQyZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.8ZwiqsRjhmlATbQAdNY8YOqQ1qflDVBY7GKCwf12-sE',\n  },\n};\n\nexport const trendingWeekQuery = async () => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/week?language=en-US`,\n      options\n    );\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const searchMovies = async query => {\n  try {\n    const response = await axios.get(\n      'https://api.themoviedb.org/3/search/movie',\n      {\n        ...options,\n        params: {\n          query: query,\n        },\n      }\n    );\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const getMovieCredits = async movieId => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits`,\n      options\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\nexport const getMovieReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews`,\n      options\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\nexport const getMovieDetails = async movieId => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}`,\n      options\n    );\n    // console.log(response.data);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n","import React, { useState, useEffect } from 'react';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport { searchMovies } from '../components/services/Api';\n\nconst MoviesPage = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n  const searchName = searchParams.get('name') ?? '';\n\n  const updateQueryString = name => {\n    const nextParams = name !== '' ? { name } : {};\n    setSearchParams(nextParams);\n  };\n\n  useEffect(() => {\n    if (!searchName) return;\n    const getSearchResults = async () => {\n      try {\n        const response = await searchMovies(searchName);\n        setMovies(response.data.results);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    getSearchResults();\n  });\n\n  const handleSearchSubmit = event => {\n    event.preventDefault();\n    const searchValue = searchName;\n    setSearchParams({ name: searchValue });\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSearchSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Search movies...\"\n          value={searchName}\n          onChange={e => updateQueryString(e.target.value)}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n\n      {movies.length === 0 ? (\n        <p>No movies found.</p>\n      ) : (\n        <ul>\n          {movies.map(movie => (\n            <li key={movie.id}>\n              <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                {movie.title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default MoviesPage;\n"],"names":["options","method","headers","accept","Authorization","trendingWeekQuery","axios","response","console","error","searchMovies","query","params","getMovieCredits","movieId","data","getMovieReviews","getMovieDetails","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","location","useLocation","searchName","get","useEffect","getSearchResults","results","onSubmit","event","preventDefault","name","type","placeholder","value","onChange","e","target","length","map","movie","to","id","state","from","title"],"sourceRoot":""}