{"version":3,"file":"static/js/940.8b2ae5cb.chunk.js","mappings":"uOAEMA,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAIOC,EAAiB,mCAAG,6GAENC,EAAAA,EAAAA,IAAA,kEAErBN,GAJ2B,cAEvBO,EAFuB,yBAMtBA,GANsB,gCAQ7BC,QAAQC,MAAR,MAR6B,yDAAH,qDAuDjBC,EAAe,mCAAG,WAAMC,GAAN,gGAEJL,EAAAA,EAAAA,IAAA,6CACiBK,GACtCX,GAJyB,cAErBO,EAFqB,OAM3BC,QAAQI,IAAIL,EAASM,MANM,kBAOpBN,EAASM,MAPW,sCAS3BL,QAAQC,MAAR,MAT2B,8DAAH,qD,iHCK5B,UA7DyB,WAAO,IAAD,IAC7B,GAA0BK,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQL,GAAYM,EAAAA,EAAAA,MAAZN,QACFO,GAAWC,EAAAA,EAAAA,MACXC,GAAeC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KAoBpD,IAlBAC,EAAAA,EAAAA,YAAU,WACR,GAAKb,EAAL,CAEA,IAAMc,EAAiB,mCAAG,8GAEMf,EAAAA,EAAAA,IAAgBC,GAFtB,OAEZe,EAFY,OAGlBV,EAASU,GACTlB,QAAQI,IAAIc,GACZlB,QAAQI,IAAID,GALM,gDAOlBH,QAAQC,MAAR,MAPkB,qGAAH,qDAYvBgB,GAdoB,CAerB,GAAE,CAACd,KAECI,EACH,OAAO,wCAGT,IAAQY,EAAYZ,EAAZY,QAER,OACE,4BACE,SAAC,KAAD,CAAMC,GAAIR,EAAaS,QAAvB,sBACA,4BACE,gBACEC,IAAG,0CAAqCH,EAAQI,aAChDC,IAAKL,EAAQM,SAEf,kCAAQN,EAAQM,MAAhB,aAA0BN,EAAQO,aAAaC,UAAU,EAAG,GAA5D,QACA,wCAAuC,GAAvBR,EAAQS,aAAxB,QACA,sCACA,uBAAIT,EAAQU,YACZ,oCACA,uBAAIV,EAAQW,OAAOC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,YAEnD,4BACE,oDACA,2BACE,yBACE,SAAC,KAAD,CAAMd,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,2BAGJ,SAAC,KAAD,SAIP,C","sources":["components/services/Api.js","pages/MovieDetailPage.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2MDg2OTc5NGZkZmMyODViY2Q4OTk5YWM4ZjhlZDY5NCIsInN1YiI6IjY0NzhkNWFjZTMyM2YzMDEwNjEzZjQyZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.8ZwiqsRjhmlATbQAdNY8YOqQ1qflDVBY7GKCwf12-sE',\n  },\n};\n\nexport const trendingWeekQuery = async () => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/week?language=en-US`,\n      options\n    );\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const SearchQuery = async query => {\n  try {\n    const response = await axios.get(\n      'https://api.themoviedb.org/3/search/movie',\n      {\n        ...options,\n        params: {\n          query: query,\n        },\n      }\n    );\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const getMovieCredits = async movieId => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits`,\n      options\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\nexport const getMovieReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews`,\n      options\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\nexport const getMovieDetails = async movieId => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}`,\n      options\n    );\n    console.log(response.data);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport {\n  Link,\n  useLocation,\n  useParams,\n  Outlet,\n} from 'react-router-dom';\nimport { getMovieDetails } from '../components/services/Api';\n\n\nconst MovieDetailsPage = () => {\n  const [movie, setMovie] = useState(null);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    const fetchMovieDetails = async () => {\n        try {\n            const movieData = await getMovieDetails(movieId);\n            setMovie(movieData);\n            console.log(movieData);\n            console.log(movieId);\n        } catch (error) {\n            console.error(error);\n        } finally {\n        }\n    };\n\n    fetchMovieDetails();\n  }, [movieId]);\n\n  if (!movie) {\n    return <div>Loading...</div>;\n  }\n\n  const { details } = movie;\n\n  return (\n    <div>\n      <Link to={backLinkHref.current}>Go back</Link>\n      <div>\n        <img\n          src={`https://image.tmdb.org/t/p/w500/${details.poster_path}`}\n          alt={details.title}\n        />\n        <h1>{`${details.title} (${details.release_date.substring(0, 4)})`}</h1>\n        <p>User score: {details.vote_average * 10}%</p>\n        <h2>Overview</h2>\n        <p>{details.overview}</p>\n        <h2>Genres</h2>\n        <p>{details.genres.map(genre => genre.name).join(', ')}</p>\n      </div>\n      <div>\n        <h2>Additional information</h2>\n        <ul>\n          <li>\n            <Link to=\"cast\">Cast</Link>\n          </li>\n          <li>\n            <Link to=\"reviews\">Reviews</Link>\n          </li>\n        </ul>\n        <Outlet />\n      </div>\n    </div>\n  );\n};\n\nexport default MovieDetailsPage;\n"],"names":["options","method","headers","accept","Authorization","trendingWeekQuery","axios","response","console","error","getMovieDetails","movieId","log","data","useState","movie","setMovie","useParams","location","useLocation","backLinkHref","useRef","state","from","useEffect","fetchMovieDetails","movieData","details","to","current","src","poster_path","alt","title","release_date","substring","vote_average","overview","genres","map","genre","name","join"],"sourceRoot":""}